const express = require('express');
const serverless = require('serverless-http');
const cors = require('cors');
const axios = require('axios');

const app = express();
const router = express.Router();

app.use(cors());

// ScrapingDog API configuration
const SCRAPINGDOG_API_KEY = process.env.SCRAPINGDOG_API_KEY || '67a869612a3dcebfbe03273a';

// Function to normalize domain for comparison
function normalizeDomain(domain) {
    return domain.toLowerCase()
        .replace(/^https?:\/\//i, '')
        .replace(/^www\./i, '')
        .replace(/\/+$/, '')
        .split('/')[0]
        .split(':')[0];
}

// Log all requests
app.use((req, res, next) => {
    console.log('=== New Request ===');
    console.log('URL:', req.url);
    console.log('Method:', req.method);
    console.log('Query:', req.query);
    next();
});

// API endpoint to check rank
router.get('/check-rank', async (req, res) => {
    console.log('=== Starting Rank Check ===');
    const { keyword, domain } = req.query;
    
    if (!keyword || !domain) {
        console.log('Missing parameters:', { keyword, domain });
        return res.status(400).json({ error: 'Missing keyword or domain' });
    }
    
    console.log('Parameters:', { keyword, domain });
    const cleanDomain = normalizeDomain(domain);
    console.log('Clean domain:', cleanDomain);

    try {
        const params = {
            api_key: SCRAPINGDOG_API_KEY,
            query: keyword,
            results: 100,
            country: 'us',
            page: 0,
            advance_search: "false"
        };

        console.log('Making ScrapingDog API request with params:', params);
        const response = await axios.get('https://api.scrapingdog.com/google/', { params });
        console.log('ScrapingDog API response status:', response.status);

        if (response.status === 200 && response.data) {
            let bestRank = -1;
            
            // Check local results first
            const localResults = response.data.local_results || [];
            console.log('Local results found:', localResults.length);
            
            for (let i = 0; i < localResults.length; i++) {
                const result = localResults[i];
                const title = (result.title || '').toLowerCase();
                const domainLower = cleanDomain.toLowerCase();
                
                if (title.includes(domainLower) || 
                    (domain.includes('rickyheathplumbing') && title.includes('ricky heath plumbing'))) {
                    console.log('Found match in local results at position:', i + 1);
                    bestRank = i + 1;
                    break;
                }
            }

            // If not found in local, check organic results
            if (bestRank === -1) {
                const organicResults = response.data.organic_results || [];
                console.log('Organic results found:', organicResults.length);
                
                for (let i = 0; i < organicResults.length; i++) {
                    const result = organicResults[i];
                    const link = (result.link || '').toLowerCase();
                    const displayedLink = (result.displayed_link || '').toLowerCase();
                    const domainLower = cleanDomain.toLowerCase();
                    
                    if (link.includes(domainLower) || displayedLink.includes(domainLower)) {
                        console.log('Found match in organic results at position:', i + 1);
                        bestRank = i + 1;
                        break;
                    }
                }
            }

            console.log('Final rank:', bestRank);
            if (bestRank !== -1) {
                res.json({ rank: bestRank });
            } else {
                res.json({ rank: 'Not found in top 100' });
            }
        } else {
            console.error('Invalid API response:', response.status);
            res.status(500).json({ error: 'Invalid API response' });
        }
    } catch (error) {
        console.error('Error checking rank:', error.message);
        if (error.response) {
            console.error('Error response:', error.response.data);
        }
        res.status(500).json({ error: 'Error checking rank: ' + error.message });
    }
});

// API endpoint to check credits
router.get('/credits', async (req, res) => {
    console.log('=== Checking Credits ===');
    try {
        console.log('Making ScrapingDog credits API request');
        const response = await axios.get(`https://api.scrapingdog.com/check-credits?api_key=${SCRAPINGDOG_API_KEY}`);
        console.log('Credits API response status:', response.status);
        
        if (response.status === 200 && response.data) {
            const result = {
                credits: response.data.available_credits || 0,
                plan: response.data.plan || 'Unknown'
            };
            console.log('Credits result:', result);
            res.json(result);
        } else {
            throw new Error('Invalid response from ScrapingDog');
        }
    } catch (error) {
        console.error('Error checking credits:', error.message);
        if (error.response) {
            console.error('Error response:', error.response.data);
        }
        res.status(500).json({ error: 'Failed to check credits' });
    }
});

app.use('/', router);
module.exports.handler = serverless(app);
